1. go() 方法
    该方法用来请求某个链接，而且他可以模拟GET和POST请求，同时支持传入请求头，表单等数据
ok, reason = splash:go(url, baseurl = nil, http_method = "GET", body = nil, formdata = nil)

参数说明:
    url 请求的URL
    baseurl  表示资源加载相对路径
    headers  表示请求头
    http_method  默认为GET，同时支持POST
    body  发POST请求时的表单数据，使用Content-type为application/json
    formdata  POST的时候的表单数据，使用的Content-type为application/x-www-form-urlencoded


    该方法返回结果是结果ok和原因reason的组合，如果ok为空，代表网页加载出现了错误，此时reason变量中包含了错误的原因，否则证明页面加载成功。

function main(splash, args)
    local ok, reason = splash:go{"http://httpbin.org/post", http_method = "POST", body = "name=Germey")
    if ok then
        return splash:html()
    end
end



2. wait() 方法
    控制页面等待时间
ok, reason = splash:wait{time, cancel_on_redirect = false, cancel_on_error = true}

参数说明:
    time  等待秒数
    cancel_on_redirect  表示如果发生了重定向就停止等待,并返回重定向结果
    cancel_on_error  表示如果发生了加载错误，就停止等待


function main(splash)
    splash:go("https://www.taobao.com")
    splash:wait(2)
    return {html = splash:html()}
end



3. jsfunc() 方法:
    此方法直接调用JavaScript定义的方法，但是调用的方法需要用双中括号来包围，这相当于实现了JavaScript方法到Lua脚本的转换
function main(splash, args)
    local get_div_count = splash:jsfunc([[
    function(){
        var body = document.body;
        var divs = body.getElementByTagName('div');
        return divs.length
    }
    ]])
    splash:go("http://www.baidu.com")
    return ("There are %s DIVs"):format(
        get_div_count())
end

计算了页面div节点的个数
转化细节参考官方文档



4. evaljs() 方法:
    可以执行JavaScript代码并返回最后一条JavaScript语句的返回结果
reuslt = splash:evaljs(js)

local title = splash:evaljs("document.title")



5. runjs() 方法
    可以执行JavaScript代码，它与evaljs()的功能类似，但是更偏向于执行某些动作或声明某些方法。
function main(splash, args)
    splash:go("https://www.baidu.com")
    splash:runjs("foo = function(){return 'bar'}")
    local result = splash:evaljs("foo()")
    return result
end



5. autoload() 方法:
    此方法可以设置每个页面访问时自动加载的对象
ok, reason = splash:autoload{source_or_url, source = uil, url = nil}

参数说明:
    source_or_url JavaScript代码或者JavaScript库链接
    source JavaScript代码
    url JavaScript库链接

此方法只加载JavaScript代码或者库，不执行操作。若要执行操作，可以调用evaljs()或者runjs()方法

function main(splash, args)
    splash:autoload([[
        function get_document_title(){
            return document.title;
        }
    ]])
    splash:go("https://www.baidu.com")
    return splash:evaljs("get_document_title()")
end

加载方法库，例如jQuery

function main(splash, args)
    assert(splash:autoload("https://code.jquery.com/jquery-2.1.3.min.js")
    assert(splash:go("https://www.taobao.com"))
    local version = splash:evaljs("$.fn.jquery")
    return 'JQuery version: '..version
end

注释:  ..  为字符串拼接方法



6. call_later() 方法:
    此方法通过设置定时任务和延迟时间来实现任务延时执行，并且可以在执行前通过cancel()方法重新执行定时任务
function main(splash, args)
    local snapshots = {}
    local timer = splash:call_later(function()
        snapshots["a"] = splash:png()
        splash:wait(1, 0)
        snapshots["b"] = splash:png()
    end, 0.2)
    splash:go("https://www.taobao.com")
    splash:wait(3.0)
    return snapshots
end

注释:定义了字典，0.2s的时候获取网页截图，然后等待1s，1.2s时再次获取网页截图



7. http_get() 方法
    模拟发送HTTP的GET请求
response = splash:http_get("url, headers = nil, follew_redirects=true}

参数说明:
    url: 请求URL
    headers: 请求头
    follow_redirects: 表示是否启动自动重定向

function main(splash, args)
    local treat = require("treat")
    local response = splash:http_get("http://httpbin.org/get")
        return{
            html = treat.as_string(response.body),
            url = response.url,
            status = response.status
        }
end



8. http_post() 方法
    模拟发送POST请求
response = splash:http_get("url, headers = nil, follew_redirects=true}

参数说明:
    url: 请求URL
    headers: 请求头
    follow_redirects: 表示是否启动自动重定向
    body: 表单数据

function main(splash, args)
    local treat = require("treat")
    local json = require("json")
    local response = splash:http_post{"http://httpbin.org/post",
        body = json.encode({name = "Germey"}),
        headers = {["content-type"] = "application/json"}
    }
    return {
        html=treat.as_string(response.body),
        url=response.url,
        status=response.status
    }
end



9. set_content() 方法
    用来设置页面的内容
function main(splash)
    assert(splash:set_content("<html><body><h1>hello
    <h1><body><html>"))
    return splash:png()
end



10. html() 方法
    用来获取网页源代码
function main(splash, args)
    splash:go("https://httpbin.org/get")
    return splash:html()
end



11. png() 方法
    用来获取PNG格式的网页截图
function main(splash, args)
    splash:go("https://httpbin.org/get")
    return splash.png()
end



12. jpeg() 方法
    用来获取JPEG格式的网页截图
function main(splash, args)
    splash:go(https://www.taobao.com")
    return splash:jpeg()
end



13. har() 方法
    用来获取页面加载过程描述
function main(splash, args)
    splash:go("https://www.baidu.com")
    return splash:har()
end



14. url() 方法
    获取当前正在访问的URL
function main(splash, args)
    splash:go("https://www.baidu.com")
    return splash:url()
end



15. get_cookies() 方法
    获取当前页面的Cookies
function main(splash, args)
    splash:go("https://www.baidu.com")
    return splash:get_cookies()
end



16. add_cookie() 方法
    可以为当前页面添加Cookie
cookies = splash:add_cookie{name, value, path=nil, domain=nil, expires=nil, httpOnly=nil, secure=nil}

该方法各个参数代表Cookie的各个属性

function main(splash, args)
    splash:add_cookie{"sessionid", "237465ghgfsd", "/", domain="http://example.com"}
    splash:go("http://example.com/")
    return splash:html()
end



17. clear_cookies() 方法
    清除所有Cookies
function main(splash, args)
    splash:go("https://www.baidu.com/")
    splash:clear_cookies()
    return splash:get_cookies()
end



18. get_viewport_size() 方法
    获取当前浏览器页面大小
function main(splash, args)
    splash:go("https://www.baidu.com/")
    return splash:get_viewport_size()
end



19. set_viewport_size() 方法
    设置当前浏览器页面大小



20. set_viewport_full() 方法
    设置浏览器全屏显示



21. set_user_agent() 方法
    设置浏览器的User-Agent



22. set_custom_headers() 方法
    设置请求头
function main(splash)
    splash:set_custom_headers({["User-Agent"] = "Splash", ["Size"] = "Splash",
    })
    splash:go("http://httpbin.org/get")
    return splash:html()
end



23. select() 方法
    可以选中符合条件的第一个节点,如果有多个节点满足条件,则只会返回一个,其参数时CSS选择器
function main(splash, args)
    splash:go("https://www.baidu.com/")
    input = splash:select("#kw")
    input:send_text('Splash')
    splash:wait(3)
    return splash:png()
end

先选中了搜索框，然后调用了send_text()方法填写文本



24. select_all() 方法
    可以选中所有符合条件的节点，其参数为CSS选择器
function main(splash)
    local treat = require('treat')
    assert(splash:go("http://quotes.toscrape.com/"))
    assert(splash:wait(0.5))
    local texts = splash:select_all('.quote .text')
    local results = {}
    for index, text in ipairs(texts) do
        results[index] = text.node.innerHTML
    end
    return treat.as_array(results)
end

通过CSS选择器选中了节点的正文内容，随后遍历了所有节点，将其中的文本获取下来



25. mouse_click() 方法
    可以模拟鼠标点击操作，传入的参数为坐标值x和y。此外也可以直接选中某个节点，然后调用此方法
function main(splash)
    splash:go("https://www.baidu.com/")
    input = splash:select("#kw")
    input:send_text('Splash')
    submit:mouse_click()
    splash:wait(3)
    return splash:png()
end

首先选中页面的输入框，输入了文本，然后选中"提交"按钮，调用了mouse_click()方法提交查询，然后页面等待三秒，返回截图



其它说明参考官方文档
